@inject UseCases.UseCaseInterfaces.IViewCategoriesUseCase ViewCategoriesUseCase
@inject UseCases.UseCaseInterfaces.IViewProductsByCategoryId ViewProductsByCategoryId

<div class="form-group">
	<label for="category">种类</label>
	<select id="category" @bind="SelectedCategoryId" class="form-control">
		<option value="0" selected></option>
		@foreach (var item in categories)
		{
			<option value="@item.CategoryId">@item.Name</option>
		}
	</select>
</div>
@if(productsInCategory != null)
{
	<table class="table">
		<thead>
			<tr>
				<th>产品名</th>
				<th>数量</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in productsInCategory)
			{
				<tr>
					<td>@item.Name</td>
					<td>@item.Quantity</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	private IEnumerable<Product> productsInCategory;
	private int selectedCategoryId;
	private int SelectedCategoryId
	{
		get { return selectedCategoryId; }
		set 
		{ 
			selectedCategoryId = value;
			productsInCategory = ViewProductsByCategoryId.Execute(value);
			StateHasChanged();
		}
	}
	private IEnumerable<Category> categories;
	protected override void OnInitialized()
	{
		base.OnInitialized();
		categories = ViewCategoriesUseCase.Execute();
	}
}
